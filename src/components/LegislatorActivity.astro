---
import { useTranslations } from "../i18n/utils";
import { timeAgo } from "../lib/utils";
import DataFeed from "./DataFeed.astro";
import LegislatorActivityPage from "./LegislatorActivityPage.astro";
import DisplayCards from "./ui/display-cards.tsx";

type SupportedLang = "en" | "zh-TW";

interface BillActivity {
	id: string;
	title: string;
	status?: string;
	law?: string;
	updatedAt?: string;
	url?: string;
	meetingCode?: string;
}

interface MeetActivity {
	id: string;
	name: string;
	type?: string;
	date?: string;
	location?: string;
	url?: string;
	updatedAt?: string;
}

type Activity = {
	id: string;
	type: "propose" | "cosign" | "meet" | string;
	title: string;
	date?: Date | null;
	url?: string;
	details: Record<string, string | undefined>;
};

type LegislatorActivityProps = {
	lang: SupportedLang;
	variant?: "card" | "page";
};

const { lang = "zh-TW", variant = "card" } = Astro.props as LegislatorActivityProps;

const isCard = variant === "card";
const limit = isCard ? 3 : 100;
const t = useTranslations(lang);

const locale = lang === "en" ? "en-US" : "zh-TW";
const joinSeparator = lang === "en" ? ", " : "、";

const API_BASE = "https://ly.govapi.tw/v2";
const LEGISLATOR_TERM = 11;
const LEGISLATOR_NAME = "葛如鈞";
const encodedName = encodeURIComponent(LEGISLATOR_NAME);

const dateTimeFormatter = new Intl.DateTimeFormat(locale, {
	year: "numeric",
	month: lang === "en" ? "short" : "2-digit",
	day: "2-digit",
	hour: "2-digit",
	minute: "2-digit",
});

async function fetchJSON<T>(path: string): Promise<T | null> {
	const response = await fetch(`${API_BASE}${path}`, {
		method: "GET",
		headers: { accept: "application/json" },
		cache: "no-store",
	});

	if (!response.ok) {
		throw new Error(`Failed to fetch ${path}: ${response.status} ${response.statusText}`);
	}

	return (await response.json()) as T;
}

function asRecord(value: unknown): Record<string, unknown> | null {
	return value && typeof value === "object" ? (value as Record<string, unknown>) : null;
}

function pickFirstString(value: unknown): string | null {
	if (!value) return null;
	if (Array.isArray(value)) {
		const candidate = value.find((item) => typeof item === "string" && item.trim().length > 0);
		return candidate ? candidate : null;
	}
	return typeof value === "string" && value.trim().length > 0 ? value : null;
}

function joinValues(value: unknown): string {
	if (!value) return "";
	if (Array.isArray(value)) {
		return value
			.map((item) => (typeof item === "string" ? item.trim() : ""))
			.filter((item) => item.length > 0)
			.join(joinSeparator);
	}
	return typeof value === "string" ? value : "";
}

function normalizeRocDate(value: string): string | null {
	const match = value.match(/^(\d{2,3})年(\d{1,2})月(\d{1,2})日/);
	if (!match) return null;
	const year = Number.parseInt(match[1], 10) + 1911;
	const month = match[2].padStart(2, "0");
	const day = match[3].padStart(2, "0");
	return `${year}-${month}-${day}`;
}

function parseToDate(value?: string | null): Date | null {
	if (!value) return null;
	const trimmed = value.trim();
	if (!trimmed) return null;

	const roc = normalizeRocDate(trimmed);
	if (roc) {
		const parsedRoc = Date.parse(roc);
		if (!Number.isNaN(parsedRoc)) {
			return new Date(parsedRoc);
		}
	}

	const normalized = trimmed.replace(/\//g, "-");
	const parsed = Date.parse(normalized);
	if (!Number.isNaN(parsed)) {
		return new Date(parsed);
	}

	return null;
}

function formatDateTime(value?: string | null): string {
	const parsed = parseToDate(value);
	if (parsed) {
		return dateTimeFormatter.format(parsed);
	}
	return value ?? "";
}

function mapBillActivity(entry: Record<string, unknown>): BillActivity | null {
	const id = typeof entry["議案編號"] === "string" ? entry["議案編號"] : undefined;
	if (!id) return null;

	const title = (typeof entry["議案名稱"] === "string" && entry["議案名稱"]) || id;

	const status = typeof entry["議案狀態"] === "string" ? entry["議案狀態"] : undefined;
	const law = joinValues(entry["法律編號:str"]) || joinValues(entry["法律編號"]) || undefined;
	const updatedAt =
		(typeof entry["最新進度日期"] === "string" && entry["最新進度日期"]) ||
		(typeof entry["資料抓取時間"] === "string" && entry["資料抓取時間"]) ||
		undefined;
	const meetingCode = typeof entry["會議代碼"] === "string" ? entry["會議代碼"] : undefined;

	let url: string | undefined;
	if (typeof entry["url"] === "string") {
		url = entry["url"];
	} else if (Array.isArray(entry["相關附件"])) {
		const attachments = entry["相關附件"].map(asRecord).filter((record): record is Record<string, unknown> => !!record);
		const attachmentRecord = attachments.find((record) => typeof record["網址"] === "string");
		if (attachmentRecord) {
			url = attachmentRecord["網址"] as string;
		}
	}

	return {
		id,
		title,
		status,
		law,
		updatedAt,
		url,
		meetingCode,
	};
}

function mapMeetActivity(entry: Record<string, unknown>): MeetActivity | null {
	const id = typeof entry["會議代碼"] === "string" ? entry["會議代碼"] : undefined;
	if (!id) return null;

	const name =
		(typeof entry["標題"] === "string" && entry["標題"]) ||
		(typeof entry["會議標題"] === "string" && entry["會議標題"]) ||
		(typeof entry["name"] === "string" && entry["name"]) ||
		id;

	const type = typeof entry["會議種類"] === "string" ? entry["會議種類"] : undefined;
	let date = pickFirstString(entry["日期"]);

	const meetingRecords = Array.isArray(entry["會議資料"])
		? entry["會議資料"].map(asRecord).filter((record): record is Record<string, unknown> => !!record)
		: [];

	if (!date && meetingRecords.length > 0) {
		const firstRecord = meetingRecords[0];
		date = pickFirstString(firstRecord["日期"]) || (typeof firstRecord["日期"] === "string" ? (firstRecord["日期"] as string) : null);
	}

	const location = typeof entry["地點"] === "string" ? entry["地點"] : undefined;

	let url: string | undefined;
	if (Array.isArray(entry["連結"])) {
		const links = entry["連結"].map(asRecord).filter((record): record is Record<string, unknown> => !!record);
		const meetingLink = links.find((link) => typeof link["連結"] === "string" && (!link["類型"] || link["類型"] === "User"));
		if (meetingLink) {
			url = meetingLink["連結"] as string;
		}
	}
	if (!url && meetingRecords.length > 0) {
		const ppgLink = meetingRecords.find((record) => typeof record["ppg_url"] === "string");
		if (ppgLink) {
			url = ppgLink["ppg_url"] as string;
		}
	}

	const updatedAt = (typeof entry["資料抓取時間"] === "string" && entry["資料抓取時間"]) || undefined;

	return {
		id,
		name,
		type,
		date: date ?? undefined,
		location,
		url,
		updatedAt,
	};
}

type BillsResponse = {
	bills?: Record<string, unknown>[];
};

type MeetsResponse = {
	meets?: Record<string, unknown>[];
};

const safeLimit = Number.isFinite(limit) ? Math.max(1, Math.min(20, Math.floor(limit))) : 5;

let allActivities: Activity[] = [];
let fetchError = false;

try {
	const [proposeRes, cosignRes, meetsRes] = await Promise.all([
		fetchJSON<BillsResponse>(`/legislators/${LEGISLATOR_TERM}/${encodedName}/propose_bills?limit=${safeLimit}`),
		fetchJSON<BillsResponse>(`/legislators/${LEGISLATOR_TERM}/${encodedName}/cosign_bills?limit=${safeLimit}`),
		fetchJSON<MeetsResponse>(`/legislators/${LEGISLATOR_TERM}/${encodedName}/meets?limit=${safeLimit}`),
	]);

	const proposedBills =
		proposeRes?.bills
			?.map((entry) => mapBillActivity(entry))
			.filter((item): item is BillActivity => !!item)
			.slice(0, safeLimit) ?? [];

	const cosignedBills =
		cosignRes?.bills
			?.map((entry) => mapBillActivity(entry))
			.filter((item): item is BillActivity => !!item)
			.slice(0, safeLimit) ?? [];

	const meetList =
		meetsRes?.meets
			?.map((entry) => mapMeetActivity(entry))
			.filter((item): item is MeetActivity => !!item)
			.slice(0, safeLimit) ?? [];

	const activities: Activity[] = [
		...proposedBills.map(
			(bill): Activity => ({
				id: bill.id,
				type: "propose",
				title: bill.title,
				date: parseToDate(bill.updatedAt),
				url: bill.url,
				details: {
					[t("home.legislatorActivity.billStatus")]: bill.status,
					[t("home.legislatorActivity.law")]: bill.law,
				},
			}),
		),
		...cosignedBills.map(
			(bill): Activity => ({
				id: bill.id,
				type: "cosign",
				title: bill.title,
				date: parseToDate(bill.updatedAt),
				url: bill.url,
				details: {
					[t("home.legislatorActivity.billStatus")]: bill.status,
					[t("home.legislatorActivity.law")]: bill.law,
				},
			}),
		),
		...meetList.map(
			(meet): Activity => ({
				id: meet.id,
				type: "meet",
				title: meet.name,
				date: parseToDate(meet.date),
				url: meet.url,
				details: {
					[t("home.legislatorActivity.meetingType")]: meet.type,
					[t("home.legislatorActivity.location")]: meet.location,
				},
			}),
		),
	];

	activities.sort((a, b) => {
		if (a.date && b.date) {
			return b.date.getTime() - a.date.getTime();
		}
		if (a.date) return -1;
		if (b.date) return 1;
		return 0;
	});

	allActivities = activities.slice(0, safeLimit);
} catch (error) {
	console.error("Failed to fetch legislator activity:", error);
	fetchError = true;
}

const timestamps = allActivities
	.map((item) => (item.date ? item.date.toISOString() : null))
	.filter((value): value is string => typeof value === "string" && value.length > 0);

const lastUpdatedRaw = timestamps.sort((a, b) => (a > b ? 1 : -1)).at(-1) ?? null;
const lastUpdatedLabel = lastUpdatedRaw ? formatDateTime(lastUpdatedRaw) : null;

const hasData = allActivities.length > 0;

const carouselLabels = {
	activity: t("home.legislatorActivity.title"),
	propose: t("home.legislatorActivity.section.propose"),
	cosign: t("home.legislatorActivity.section.cosign"),
	meet: t("home.legislatorActivity.section.meets"),
};

const cardItems = allActivities.slice(0, 5).map((activity) => {
	const details = Object.entries(activity.details)
		.filter(([, value]) => value)
		.map(([key, value]) => `${key}: ${value}`)
		.join(lang === "en" ? ", " : "、");

	return {
		title: activity.title,
		description: details,
		date: activity.date ? timeAgo(activity.date.toISOString(), lang) : "",
		href: activity.url ? activity.url : `/${lang}/activities/${activity.id}`,
		icon: activity.type,
	};
});
---

<DataFeed
	variant={variant}
	title={t("home.legislatorActivity.title")}
	subtitle={t("home.legislatorActivity.subtitle")}
	viewMoreLink={`/${lang}/activities`}
	fetchError={fetchError}
	hasData={hasData}
	emptyMessage={t("home.legislatorActivity.empty")}
	fetchErrorMessage={t("home.legislatorActivity.fetchError")}
>
	<div slot="card">
		<DisplayCards client:load cards={cardItems} />
	</div>
	<div slot="page">
		<LegislatorActivityPage lang={lang} activities={allActivities} labels={carouselLabels} />
	</div>
</DataFeed>
