---
import { useTranslations } from "@/i18n/utils";

type SupportedLang = "en" | "zh-TW";

interface BillActivity {
	id: string;
	title: string;
	status?: string;
	law?: string;
	updatedAt?: string;
	url?: string;
	meetingCode?: string;
}

interface MeetActivity {
	id: string;
	name: string;
	type?: string;
	date?: string;
	location?: string;
	url?: string;
	updatedAt?: string;
}

interface InterpellationActivity {
	id: string;
	title: string;
	date?: string;
	url?: string;
}

type LegislatorActivityProps = {
	lang: SupportedLang;
	limit?: number;
};

const { lang = "zh-TW", limit = 5 } = Astro.props as LegislatorActivityProps;
const t = useTranslations(lang);

const locale = lang === "en" ? "en-US" : "zh-TW";
const joinSeparator = lang === "en" ? ", " : "、";

const API_BASE = "https://ly.govapi.tw/v2";
const LEGISLATOR_TERM = 11;
const LEGISLATOR_NAME = "葛如鈞";
const encodedName = encodeURIComponent(LEGISLATOR_NAME);

const dateFormatter = new Intl.DateTimeFormat(locale, {
	year: "numeric",
	month: lang === "en" ? "short" : "2-digit",
	day: "2-digit",
});

const dateTimeFormatter = new Intl.DateTimeFormat(locale, {
	year: "numeric",
	month: lang === "en" ? "short" : "2-digit",
	day: "2-digit",
	hour: "2-digit",
	minute: "2-digit",
});

async function fetchJSON<T>(path: string): Promise<T | null> {
	const response = await fetch(`${API_BASE}${path}`, {
		method: "GET",
		headers: { accept: "application/json" },
		cache: "no-store",
	});

	if (!response.ok) {
		throw new Error(`Failed to fetch ${path}: ${response.status} ${response.statusText}`);
	}

	return (await response.json()) as T;
}

function asRecord(value: unknown): Record<string, unknown> | null {
	return value && typeof value === "object" ? (value as Record<string, unknown>) : null;
}

function pickFirstString(value: unknown): string | null {
	if (!value) return null;
	if (Array.isArray(value)) {
		const candidate = value.find((item) => typeof item === "string" && item.trim().length > 0);
		return candidate ? candidate : null;
	}
	return typeof value === "string" && value.trim().length > 0 ? value : null;
}

function joinValues(value: unknown): string {
	if (!value) return "";
	if (Array.isArray(value)) {
		return value
			.map((item) => (typeof item === "string" ? item.trim() : ""))
			.filter((item) => item.length > 0)
			.join(joinSeparator);
	}
	return typeof value === "string" ? value : "";
}

function normalizeRocDate(value: string): string | null {
	const match = value.match(/^(\d{2,3})年(\d{1,2})月(\d{1,2})日/);
	if (!match) return null;
	const year = Number.parseInt(match[1], 10) + 1911;
	const month = match[2].padStart(2, "0");
	const day = match[3].padStart(2, "0");
	return `${year}-${month}-${day}`;
}

function parseToDate(value?: string | null): Date | null {
	if (!value) return null;
	const trimmed = value.trim();
	if (!trimmed) return null;

	const roc = normalizeRocDate(trimmed);
	if (roc) {
		const parsedRoc = Date.parse(roc);
		if (!Number.isNaN(parsedRoc)) {
			return new Date(parsedRoc);
		}
	}

	const normalized = trimmed.replace(/\//g, "-");
	const parsed = Date.parse(normalized);
	if (!Number.isNaN(parsed)) {
		return new Date(parsed);
	}

	return null;
}

function formatDate(value?: string | null): string {
	const parsed = parseToDate(value);
	if (parsed) {
		return dateFormatter.format(parsed);
	}
	return value ?? "";
}

function formatDateTime(value?: string | null): string {
	const parsed = parseToDate(value);
	if (parsed) {
		return dateTimeFormatter.format(parsed);
	}
	return value ?? "";
}

function mapBillActivity(entry: Record<string, unknown>): BillActivity | null {
	const id = typeof entry["議案編號"] === "string" ? entry["議案編號"] : undefined;
	if (!id) return null;

	const title = (typeof entry["議案名稱"] === "string" && entry["議案名稱"]) || id;

	const status = typeof entry["議案狀態"] === "string" ? entry["議案狀態"] : undefined;
	const law = joinValues(entry["法律編號:str"]) || joinValues(entry["法律編號"]) || undefined;
	const updatedAt =
		(typeof entry["最新進度日期"] === "string" && entry["最新進度日期"]) ||
		(typeof entry["資料抓取時間"] === "string" && entry["資料抓取時間"]) ||
		undefined;
	const meetingCode = typeof entry["會議代碼"] === "string" ? entry["會議代碼"] : undefined;

	let url: string | undefined;
	if (typeof entry["url"] === "string") {
		url = entry["url"];
	} else if (Array.isArray(entry["相關附件"])) {
		const attachments = entry["相關附件"]
			.map(asRecord)
			.filter((record): record is Record<string, unknown> => !!record);
		const attachmentRecord = attachments.find((record) => typeof record["網址"] === "string");
		if (attachmentRecord) {
			url = attachmentRecord["網址"] as string;
		}
	}

	return {
		id,
		title,
		status,
		law,
		updatedAt,
		url,
		meetingCode,
	};
}

function mapMeetActivity(entry: Record<string, unknown>): MeetActivity | null {
	const id = typeof entry["會議代碼"] === "string" ? entry["會議代碼"] : undefined;
	if (!id) return null;

	const name =
		(typeof entry["標題"] === "string" && entry["標題"]) ||
		(typeof entry["會議標題"] === "string" && entry["會議標題"]) ||
		(typeof entry["name"] === "string" && entry["name"]) ||
		id;

	const type = typeof entry["會議種類"] === "string" ? entry["會議種類"] : undefined;
	let date = pickFirstString(entry["日期"]);

	const meetingRecords = Array.isArray(entry["會議資料"])
		? entry["會議資料"].map(asRecord).filter((record): record is Record<string, unknown> => !!record)
		: [];

	if (!date && meetingRecords.length > 0) {
		const firstRecord = meetingRecords[0];
		date =
			pickFirstString(firstRecord["日期"]) ||
			(typeof firstRecord["日期"] === "string" ? (firstRecord["日期"] as string) : null);
	}

	const location = typeof entry["地點"] === "string" ? entry["地點"] : undefined;

	let url: string | undefined;
	if (Array.isArray(entry["連結"])) {
		const links = entry["連結"].map(asRecord).filter((record): record is Record<string, unknown> => !!record);
		const meetingLink = links.find((link) => typeof link["連結"] === "string" && (!link["類型"] || link["類型"] === "video"));
		if (meetingLink) {
			url = meetingLink["連結"] as string;
		}
	}
	if (!url && meetingRecords.length > 0) {
		const ppgLink = meetingRecords.find((record) => typeof record["ppg_url"] === "string");
		if (ppgLink) {
			url = ppgLink["ppg_url"] as string;
		}
	}

	const updatedAt =
		(typeof entry["資料抓取時間"] === "string" && entry["資料抓取時間"]) || undefined;

	return {
		id,
		name,
		type,
		date: date ?? undefined,
		location,
		url,
		updatedAt,
	};
}

function mapInterpellationActivity(entry: Record<string, unknown>): InterpellationActivity | null {
	const id =
		(typeof entry["質詢編號"] === "string" && entry["質詢編號"]) ||
		(typeof entry["會議代碼"] === "string" && entry["會議代碼"]) ||
		null;
	if (!id) return null;

	const title =
		(typeof entry["標題"] === "string" && entry["標題"]) ||
		(typeof entry["發言主題"] === "string" && entry["發言主題"]) ||
		id;

	const date =
		(typeof entry["質詢日期"] === "string" && entry["質詢日期"]) ||
		(typeof entry["日期"] === "string" && entry["日期"]) ||
		pickFirstString(entry["日期"]) ||
		undefined;

	let url: string | undefined;
	if (typeof entry["url"] === "string") {
		url = entry["url"];
	} else if (Array.isArray(entry["連結"])) {
		const links = entry["連結"].map(asRecord).filter((record): record is Record<string, unknown> => !!record);
		const target = links.find((link) => typeof link["連結"] === "string");
		if (target) {
			url = target["連結"] as string;
		}
	}

	return {
		id,
		title,
		date,
		url,
	};
}

type BillsResponse = {
	bills?: Record<string, unknown>[];
};

type MeetsResponse = {
	meets?: Record<string, unknown>[];
};

type InterpellationsResponse = {
	interpellations?: Record<string, unknown>[];
};

const safeLimit = Number.isFinite(limit) ? Math.max(1, Math.min(20, Math.floor(limit))) : 5;

let proposeBills: BillActivity[] = [];
let cosignBills: BillActivity[] = [];
let meetList: MeetActivity[] = [];
let interpellationList: InterpellationActivity[] = [];
let fetchError = false;

try {
	const [proposeRes, cosignRes, meetsRes, interpellationsRes] = await Promise.all([
		fetchJSON<BillsResponse>(`/legislators/${LEGISLATOR_TERM}/${encodedName}/propose_bills?limit=${safeLimit}`),
		fetchJSON<BillsResponse>(`/legislators/${LEGISLATOR_TERM}/${encodedName}/cosign_bills?limit=${safeLimit}`),
		fetchJSON<MeetsResponse>(`/legislators/${LEGISLATOR_TERM}/${encodedName}/meets?limit=${safeLimit}`),
		fetchJSON<InterpellationsResponse>(`/legislators/${LEGISLATOR_TERM}/${encodedName}/interpellations?limit=${safeLimit}`),
	]);

	proposeBills =
		proposeRes?.bills?.map((entry) => mapBillActivity(entry)).filter((item): item is BillActivity => !!item).slice(0, safeLimit) ?? [];
	cosignBills =
		cosignRes?.bills?.map((entry) => mapBillActivity(entry)).filter((item): item is BillActivity => !!item).slice(0, safeLimit) ?? [];
	meetList =
		meetsRes?.meets?.map((entry) => mapMeetActivity(entry)).filter((item): item is MeetActivity => !!item).slice(0, safeLimit) ?? [];
	interpellationList =
		interpellationsRes?.interpellations
			?.map((entry) => mapInterpellationActivity(entry))
			.filter((item): item is InterpellationActivity => !!item)
			.slice(0, safeLimit) ?? [];
} catch (error) {
	console.error("Failed to fetch legislator activity:", error);
	fetchError = true;
}

const timestamps = [
	...proposeBills.map((item) => item.updatedAt),
	...cosignBills.map((item) => item.updatedAt),
	...meetList.map((item) => item.updatedAt),
].filter((value): value is string => typeof value === "string" && value.length > 0);

const lastUpdatedRaw = timestamps.sort((a, b) => (a > b ? 1 : -1)).at(-1) ?? null;
const lastUpdatedLabel = lastUpdatedRaw ? formatDateTime(lastUpdatedRaw) : null;

const hasData =
	proposeBills.length > 0 ||
	cosignBills.length > 0 ||
	meetList.length > 0 ||
	interpellationList.length > 0;
---

<section class="mt-8 rounded-xl border border-slate-200 bg-white p-6 shadow-sm dark:border-slate-800 dark:bg-slate-900/40">
	<header class="flex flex-col gap-2 md:flex-row md:items-center md:justify-between">
		<div>
			<h2 class="text-xl font-semibold text-slate-900 dark:text-white">{t("home.legislatorActivity.title")}</h2>
			<p class="text-sm text-slate-600 dark:text-slate-300">{t("home.legislatorActivity.subtitle")}</p>
		</div>
		{lastUpdatedLabel && (
			<p class="text-xs text-slate-500 dark:text-slate-400">
				{t("home.legislatorActivity.updated")}: {lastUpdatedLabel}
			</p>
		)}
	</header>

	{fetchError ? (
		<p class="mt-6 rounded-lg border border-red-300 bg-red-50 px-4 py-3 text-sm text-red-700 dark:border-red-800 dark:bg-red-900/30 dark:text-red-200">
			{t("home.legislatorActivity.fetchError")}
		</p>
	) : !hasData ? (
		<p class="mt-6 rounded-lg border border-slate-200 bg-slate-50 px-4 py-3 text-sm text-slate-600 dark:border-slate-700 dark:bg-slate-800/60 dark:text-slate-300">
			{t("home.legislatorActivity.empty")}
		</p>
	) : (
		<div class="mt-6 grid gap-6 lg:grid-cols-2">
			<section class="flex flex-col gap-4">
				<h3 class="text-lg font-semibold text-slate-800 dark:text-slate-100">{t("home.legislatorActivity.section.propose")}</h3>
				{proposeBills.length > 0 ? (
					<ul class="space-y-3">
						{proposeBills.map((bill) => (
							<li
								class="rounded-lg border border-slate-200 bg-white/80 px-4 py-3 text-sm shadow-sm transition hover:border-slate-400 dark:border-slate-800 dark:bg-slate-900/60 dark:hover:border-slate-600"
								data-id={bill.id}
							>
								<div class="flex flex-col gap-2">
									<div class="flex items-start justify-between gap-3">
										<span class="font-medium text-slate-900 dark:text-white">{bill.title}</span>
										{bill.url && (
											<a class="shrink-0 text-xs font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400" href={bill.url} target="_blank" rel="noopener noreferrer">
												{t("home.legislatorActivity.viewBill")}
											</a>
										)}
									</div>
									<div class="grid gap-1 text-xs text-slate-600 dark:text-slate-300">
										{bill.status && (
											<div class="flex flex-wrap gap-1">
												<span class="font-medium text-slate-500 dark:text-slate-400">{t("home.legislatorActivity.billStatus")}:</span>
												<span class="text-slate-700 dark:text-slate-200">{bill.status}</span>
											</div>
										)}
										{bill.law && (
											<div class="flex flex-wrap gap-1">
												<span class="font-medium text-slate-500 dark:text-slate-400">{t("home.legislatorActivity.law")}:</span>
												<span class="text-slate-700 dark:text-slate-200">{bill.law}</span>
											</div>
										)}
										{bill.updatedAt && (
											<div class="flex flex-wrap gap-1">
												<span class="font-medium text-slate-500 dark:text-slate-400">{t("home.legislatorActivity.date")}:</span>
												<span class="text-slate-700 dark:text-slate-200">{formatDate(bill.updatedAt)}</span>
											</div>
										)}
										{bill.meetingCode && (
											<div class="flex flex-wrap gap-1">
												<span class="font-medium text-slate-500 dark:text-slate-400">Meeting:</span>
												<span class="text-slate-700 dark:text-slate-200">{bill.meetingCode}</span>
											</div>
										)}
									</div>
								</div>
							</li>
						))}
					</ul>
				) : (
					<p class="rounded-lg border border-slate-200 bg-slate-50 px-4 py-3 text-xs text-slate-600 dark:border-slate-800 dark:bg-slate-900/60 dark:text-slate-300">
						{t("home.legislatorActivity.empty")}
					</p>
				)}
			</section>

			<section class="flex flex-col gap-4">
				<h3 class="text-lg font-semibold text-slate-800 dark:text-slate-100">{t("home.legislatorActivity.section.cosign")}</h3>
				{cosignBills.length > 0 ? (
					<ul class="space-y-3">
						{cosignBills.map((bill) => (
							<li
								class="rounded-lg border border-slate-200 bg-white/80 px-4 py-3 text-sm shadow-sm transition hover:border-slate-400 dark:border-slate-800 dark:bg-slate-900/60 dark:hover:border-slate-600"
								data-id={bill.id}
							>
								<div class="flex flex-col gap-2">
									<div class="flex items-start justify-between gap-3">
										<span class="font-medium text-slate-900 dark:text-white">{bill.title}</span>
										{bill.url && (
											<a class="shrink-0 text-xs font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400" href={bill.url} target="_blank" rel="noopener noreferrer">
												{t("home.legislatorActivity.viewBill")}
											</a>
										)}
									</div>
									<div class="grid gap-1 text-xs text-slate-600 dark:text-slate-300">
										{bill.status && (
											<div class="flex flex-wrap gap-1">
												<span class="font-medium text-slate-500 dark:text-slate-400">{t("home.legislatorActivity.billStatus")}:</span>
												<span class="text-slate-700 dark:text-slate-200">{bill.status}</span>
											</div>
										)}
										{bill.law && (
											<div class="flex flex-wrap gap-1">
												<span class="font-medium text-slate-500 dark:text-slate-400">{t("home.legislatorActivity.law")}:</span>
												<span class="text-slate-700 dark:text-slate-200">{bill.law}</span>
											</div>
										)}
										{bill.updatedAt && (
											<div class="flex flex-wrap gap-1">
												<span class="font-medium text-slate-500 dark:text-slate-400">{t("home.legislatorActivity.date")}:</span>
												<span class="text-slate-700 dark:text-slate-200">{formatDate(bill.updatedAt)}</span>
											</div>
										)}
									</div>
								</div>
							</li>
						))}
					</ul>
				) : (
					<p class="rounded-lg border border-slate-200 bg-slate-50 px-4 py-3 text-xs text-slate-600 dark:border-slate-800 dark:bg-slate-900/60 dark:text-slate-300">
						{t("home.legislatorActivity.empty")}
					</p>
				)}
			</section>

			<section class="flex flex-col gap-4">
				<h3 class="text-lg font-semibold text-slate-800 dark:text-slate-100">{t("home.legislatorActivity.section.meets")}</h3>
				{meetList.length > 0 ? (
					<ul class="space-y-3">
						{meetList.map((meet) => (
							<li
								class="rounded-lg border border-slate-200 bg-white/80 px-4 py-3 text-sm shadow-sm transition hover:border-slate-400 dark:border-slate-800 dark:bg-slate-900/60 dark:hover:border-slate-600"
								data-id={meet.id}
							>
								<div class="flex flex-col gap-2">
									<div class="flex items-start justify-between gap-3">
										<span class="font-medium text-slate-900 dark:text-white">{meet.name}</span>
										{meet.url && (
											<a class="shrink-0 text-xs font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400" href={meet.url} target="_blank" rel="noopener noreferrer">
												{t("home.legislatorActivity.viewMeet")}
											</a>
										)}
									</div>
									<div class="grid gap-1 text-xs text-slate-600 dark:text-slate-300">
										{meet.type && (
											<div class="flex flex-wrap gap-1">
												<span class="font-medium text-slate-500 dark:text-slate-400">{t("home.legislatorActivity.meetingType")}:</span>
												<span class="text-slate-700 dark:text-slate-200">{meet.type}</span>
											</div>
										)}
										{meet.date && (
											<div class="flex flex-wrap gap-1">
												<span class="font-medium text-slate-500 dark:text-slate-400">{t("home.legislatorActivity.date")}:</span>
												<span class="text-slate-700 dark:text-slate-200">{formatDate(meet.date)}</span>
											</div>
										)}
										{meet.location && (
											<div class="flex flex-wrap gap-1">
												<span class="font-medium text-slate-500 dark:text-slate-400">{t("home.legislatorActivity.location")}:</span>
												<span class="text-slate-700 dark:text-slate-200">{meet.location}</span>
											</div>
										)}
									</div>
								</div>
							</li>
						))}
					</ul>
				) : (
					<p class="rounded-lg border border-slate-200 bg-slate-50 px-4 py-3 text-xs text-slate-600 dark:border-slate-800 dark:bg-slate-900/60 dark:text-slate-300">
						{t("home.legislatorActivity.empty")}
					</p>
				)}
			</section>

			<section class="flex flex-col gap-4">
				<h3 class="text-lg font-semibold text-slate-800 dark:text-slate-100">{t("home.legislatorActivity.section.interpellations")}</h3>
				{interpellationList.length > 0 ? (
					<ul class="space-y-3">
						{interpellationList.map((item) => (
							<li
								class="rounded-lg border border-slate-200 bg-white/80 px-4 py-3 text-sm shadow-sm transition hover:border-slate-400 dark:border-slate-800 dark:bg-slate-900/60 dark:hover:border-slate-600"
								data-id={item.id}
							>
								<div class="flex flex-col gap-2">
									<div class="flex items-start justify-between gap-3">
										<span class="font-medium text-slate-900 dark:text-white">{item.title}</span>
										{item.url && (
											<a class="shrink-0 text-xs font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400" href={item.url} target="_blank" rel="noopener noreferrer">
												{t("home.legislatorActivity.viewMeet")}
											</a>
										)}
									</div>
									<div class="grid gap-1 text-xs text-slate-600 dark:text-slate-300">
										{item.date && (
											<div class="flex flex-wrap gap-1">
												<span class="font-medium text-slate-500 dark:text-slate-400">{t("home.legislatorActivity.date")}:</span>
												<span class="text-slate-700 dark:text-slate-200">{formatDate(item.date)}</span>
											</div>
										)}
									</div>
								</div>
							</li>
						))}
					</ul>
				) : (
					<p class="rounded-lg border border-slate-200 bg-slate-50 px-4 py-3 text-xs text-slate-600 dark:border-slate-800 dark:bg-slate-900/60 dark:text-slate-300">
						{t("home.legislatorActivity.empty")}
					</p>
				)}
			</section>
		</div>
	)}
</section>