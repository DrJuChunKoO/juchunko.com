---
import { useTranslations } from "../i18n/utils";
import { timeAgo } from "../lib/utils";
import type { NewsItem } from "./NewsCarousel.tsx";
import DisplayCards from "./ui/display-cards.tsx";
import DataFeed from "./DataFeed.astro";

type SupportedLang = "en" | "zh-TW";

type NewsFeedProps = {
	lang: SupportedLang;
	variant?: "card" | "page";
};

const { lang = "zh-TW", variant = "card" } = Astro.props as NewsFeedProps;

const isCard = variant === "card";
const limit = isCard ? 3 : 100;
const t = useTranslations(lang);

// Data fetching logic
let allNews: NewsItem[] = [];
let fetchError = false;
let lastUpdatedLabel: string | null = null;

try {
	const response = await fetch("https://aifferent.juchunko.com/api/news");
	if (response.ok) {
		const data = await response.json();
		allNews = data.data.slice(0, limit);
		if (allNews.length > 0) {
			const latestTime = allNews
				.map((item) => item.time)
				.sort()
				.reverse()[0];
			if (latestTime) {
				const locale = lang === "en" ? "en-US" : "zh-TW";
				const dateTimeFormatter = new Intl.DateTimeFormat(locale, {
					year: "numeric",
					month: lang === "en" ? "short" : "2-digit",
					day: "2-digit",
					hour: "2-digit",
					minute: "2-digit",
				});
				lastUpdatedLabel = dateTimeFormatter.format(new Date(latestTime));
			}
		}
	} else {
		fetchError = true;
	}
} catch (error) {
	console.error("Failed to fetch news:", error);
	fetchError = true;
}

const hasData = allNews.length > 0;
const cardItems = allNews.slice(0, limit).map((item) => ({
	title: lang === "en" ? item.title_en : item.title,
	description: lang === "en" ? item.summary_en : item.summary,
	date: timeAgo(item.time, lang),
	href: item.url,
	icon: "newspaper",
}));
---

<DataFeed
	variant={variant}
	title={t("home.news.title")}
	subtitle={t("home.news.subtitle")}
	viewMoreLink={`/${lang}/news`}
	fetchError={fetchError}
	hasData={hasData}
	emptyMessage={t("home.news.empty")}
	fetchErrorMessage={t("home.news.fetchError")}
>
	<div slot="card">
		<DisplayCards client:load cards={cardItems.toReversed()} />
	</div>
	<div slot="page"></div>
</DataFeed>
