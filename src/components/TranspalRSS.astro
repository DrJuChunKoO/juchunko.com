---
import { useTranslations } from "src/i18n/utils";
import AlbumCards from "./ui/album-cards.tsx";
import { ArrowRight } from "lucide-react";
import { timeAgo } from "../lib/utils";
type SupportedLang = "en" | "zh-TW";

interface FeedItem {
	id: string;
	title: string;
	description?: string;
	link: string;
	pubDate: string;
	category?: string;
	author?: string;
}

type Props = {
	lang?: SupportedLang;
	limit?: number;
};

const { lang = "zh-TW" } = Astro.props as Props;
const t = useTranslations(lang);

const RSS_URL = "https://transpal.juchunko.com/rss.xml";

const dateFormatter = new Intl.DateTimeFormat(lang === "en" ? "en-US" : "zh-TW", {
	year: "numeric",
	month: lang === "en" ? "short" : "2-digit",
	day: "2-digit",
});

function decodeHtmlEntities(text: string): string {
	if (!text) return text;
	const namedEntities: Record<string, string> = {
		"&apos;": "'",
		"&quot;": '"',
		"&amp;": "&",
		"&lt;": "<",
		"&gt;": ">",
		"&nbsp;": "\u00a0",
		"&hellip;": "…",
		"&mdash;": "—",
	};

	return text.replace(/<!\[CDATA\[(.*?)\]\]>|&(?:#\d+|#x[0-9a-fA-F]+|[a-zA-Z]+);/gs, (m, c) => {
		if (c !== undefined) return c;
		return namedEntities[m] ?? m;
	});
}

// Descriptions are intentionally omitted now; we only display title and date.

async function fetchTranspal(): Promise<FeedItem[]> {
	try {
		const res = await fetch(RSS_URL, { method: "GET", headers: { accept: "application/xml" }, cache: "no-store" });
		if (!res.ok) throw new Error(`Failed to fetch TransPal RSS: ${res.status} ${res.statusText}`);
		const xml = await res.text();

		const items: FeedItem[] = [];
		const itemRegex = /<item>(.*?)<\/item>/gs;
		const titleRegex = /<title>([\s\S]*?)<\/title>/i;
		const linkRegex = /<link>([\s\S]*?)<\/link>/i;
		const descriptionRegex = /<description>([\s\S]*?)<\/description>/i;
		const pubDateRegex = /<pubDate>([\s\S]*?)<\/pubDate>/i;
		const categoryRegex = /<category>([\s\S]*?)<\/category>/i;
		const authorRegex = /<author>([\s\S]*?)<\/author>/i;
		const guidRegex = /<guid[^>]*>([\s\S]*?)<\/guid>/i;

		let m;
		while ((m = itemRegex.exec(xml)) !== null) {
			const itemXml = m[1];
			const titleMatch = titleRegex.exec(itemXml);
			const linkMatch = linkRegex.exec(itemXml);
			const descMatch = descriptionRegex.exec(itemXml);
			const pubMatch = pubDateRegex.exec(itemXml);
			const catMatch = categoryRegex.exec(itemXml);
			const authorMatch = authorRegex.exec(itemXml);
			const guidMatch = guidRegex.exec(itemXml);

			if (!titleMatch || !linkMatch) continue;

			const title = decodeHtmlEntities(titleMatch[1].replace(/<!\[CDATA\[(.*?)\]\]>/gs, "$1")).trim();
			const link = linkMatch[1].trim();
			const description = descMatch ? decodeHtmlEntities(descMatch[1].replace(/<!\[CDATA\[(.*?)\]\]>/gs, "$1")).trim() : "";
			const id = guidMatch ? guidMatch[1].trim() : link;
			const pubDate = pubMatch ? pubMatch[1].trim() : "";
			const category = catMatch ? decodeHtmlEntities(catMatch[1].trim()) : undefined;
			const author = authorMatch ? decodeHtmlEntities(authorMatch[1].trim()) : undefined;

			items.push({ id, title, link, pubDate, category, author, description });
		}

		return items;
	} catch (err) {
		console.error(err);
		return [];
	}
}

let posts: FeedItem[] = [];
let fetchError = false;

try {
	const all = await fetchTranspal();
	posts = all.slice(0, 3);
} catch (e) {
	console.error("TransPal RSS fetch failed", e);
	fetchError = true;
}
const cardItems = posts.map((activity) => {
	return {
		title: activity.title,
		description: activity.description,
		date: activity.pubDate ? timeAgo(activity.pubDate, lang) : "",
		href: activity.link ? activity.link : `/`,
		icon: "transpal",
	};
});
---

<a
	class="group relative mb-4 block overflow-hidden rounded-lg bg-gray-50 transition-colors hover:bg-gray-100 dark:bg-white/5 dark:hover:bg-white/10"
	href="https://transpal.juchunko.com/"
	target="_blank"
	rel="noopener noreferrer"
>
	<AlbumCards client:load cards={cardItems.toReversed()} />
	<div class="flex w-full items-center justify-between gap-2 bg-black/2.5 p-4 py-3 backdrop-blur-xs md:p-6 md:py-4 dark:bg-white/5">
		<header>
			<h2 class="font-semibold text-slate-900 md:text-xl dark:text-white">對話逐字稿</h2>
			<p class="text-xs text-slate-600 md:text-sm dark:text-white/50">查看最新對話逐字稿</p>
		</header>
		<ArrowRight className="size-5 text-gray-600 transition-transform group-hover:translate-x-1 dark:text-white/80" />
	</div>
</a>
